{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass UserService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:8080/api/users';\n    this.tokenKey = 'jwtToken';\n  }\n  getAllUsers() {\n    return this.http.get(`${this.baseUrl}/all`, {\n      headers: {\n        \"Authorization\": \"Bearer \" + this.getToken()\n      }\n    });\n  }\n  deleteUser(userId) {\n    return this.http.delete(`${this.baseUrl}/${userId}`, {\n      headers: {\n        \"Authorization\": \"Bearer \" + this.getToken()\n      }\n    });\n  }\n  updateUser(userId, user) {\n    return this.http.put(`${this.baseUrl}/${userId}`, user, {\n      headers: {\n        \"Authorization\": \"Bearer \" + this.getToken()\n      }\n    });\n  }\n  registerUser(user) {\n    console.log('register user frontend');\n    return this.http.post(`${this.baseUrl}/register`, user);\n  }\n  isAuthenticated(cred) {\n    return this.http.post(`${this.baseUrl}/login`, cred);\n  }\n  setToken(token) {\n    if (token !== null) {\n      localStorage.setItem(this.tokenKey, token);\n    } else {\n      localStorage.removeItem(this.tokenKey);\n    }\n  }\n  getToken() {\n    return localStorage.getItem(this.tokenKey);\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});\nexport { UserService };","map":{"version":3,"names":["UserService","constructor","http","baseUrl","tokenKey","getAllUsers","get","headers","getToken","deleteUser","userId","delete","updateUser","user","put","registerUser","console","log","post","isAuthenticated","cred","setToken","token","localStorage","setItem","removeItem","getItem","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\zprajap1\\Desktop\\IntelliJ Projects\\POCDeep-main\\POCDeep-main\\Frontend\\user-management-system\\src\\app\\service\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private baseUrl = 'http://localhost:8080/api/users';\n  private tokenKey = 'jwtToken';\n\n  constructor(private http: HttpClient) { }\n\n  getAllUsers() {\n    return this.http.get<any[]>(`${this.baseUrl}/all`, {\n      headers: {\n        \"Authorization\": \"Bearer \" + this.getToken()\n      }\n    });\n  }\n\n  deleteUser(userId: number) {\n    return this.http.delete(`${this.baseUrl}/${userId}`, {\n      headers: {\n      \"Authorization\": \"Bearer \" + this.getToken()\n    }\n  });\n  }\n\n  updateUser(userId: number, user: any) {\n\n    \n    return this.http.put<any>(`${this.baseUrl}/${userId}`, user, {\n      headers: {\n        \"Authorization\": \"Bearer \" + this.getToken()\n      }\n    });\n  }\n\n  registerUser(user: any) {\n    console.log('register user frontend');\n    return this.http.post<any>(`${this.baseUrl}/register`, user);\n  }\n  \n  isAuthenticated(cred:{email:string,pass:string}) {\n    return this.http.post<{token:string|null,valid:{isValid:boolean}}>(`${this.baseUrl}/login`,cred);\n  }\n\n  setToken(token:string|null){\n    if(token!==null){\n      localStorage.setItem(this.tokenKey,token)\n    }else{\n      localStorage.removeItem(this.tokenKey)\n    }\n\n  }\n\n  getToken():string | null {\n    return localStorage.getItem(this.tokenKey);\n  }\n}\n\n"],"mappings":";;AAGA,MAGaA,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,OAAO,GAAG,iCAAiC;IAC3C,KAAAC,QAAQ,GAAG,UAAU;EAEW;EAExCC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAQ,GAAG,IAAI,CAACH,OAAO,MAAM,EAAE;MACjDI,OAAO,EAAE;QACP,eAAe,EAAE,SAAS,GAAG,IAAI,CAACC,QAAQ;;KAE7C,CAAC;EACJ;EAEAC,UAAUA,CAACC,MAAc;IACvB,OAAO,IAAI,CAACR,IAAI,CAACS,MAAM,CAAC,GAAG,IAAI,CAACR,OAAO,IAAIO,MAAM,EAAE,EAAE;MACnDH,OAAO,EAAE;QACT,eAAe,EAAE,SAAS,GAAG,IAAI,CAACC,QAAQ;;KAE7C,CAAC;EACF;EAEAI,UAAUA,CAACF,MAAc,EAAEG,IAAS;IAGlC,OAAO,IAAI,CAACX,IAAI,CAACY,GAAG,CAAM,GAAG,IAAI,CAACX,OAAO,IAAIO,MAAM,EAAE,EAAEG,IAAI,EAAE;MAC3DN,OAAO,EAAE;QACP,eAAe,EAAE,SAAS,GAAG,IAAI,CAACC,QAAQ;;KAE7C,CAAC;EACJ;EAEAO,YAAYA,CAACF,IAAS;IACpBG,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACrC,OAAO,IAAI,CAACf,IAAI,CAACgB,IAAI,CAAM,GAAG,IAAI,CAACf,OAAO,WAAW,EAAEU,IAAI,CAAC;EAC9D;EAEAM,eAAeA,CAACC,IAA+B;IAC7C,OAAO,IAAI,CAAClB,IAAI,CAACgB,IAAI,CAA8C,GAAG,IAAI,CAACf,OAAO,QAAQ,EAACiB,IAAI,CAAC;EAClG;EAEAC,QAAQA,CAACC,KAAiB;IACxB,IAAGA,KAAK,KAAG,IAAI,EAAC;MACdC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACpB,QAAQ,EAACkB,KAAK,CAAC;KAC1C,MAAI;MACHC,YAAY,CAACE,UAAU,CAAC,IAAI,CAACrB,QAAQ,CAAC;;EAG1C;EAEAI,QAAQA,CAAA;IACN,OAAOe,YAAY,CAACG,OAAO,CAAC,IAAI,CAACtB,QAAQ,CAAC;EAC5C;;AApDWJ,WAAW,C;mBAAXA,WAAW,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAX9B,WAAW,C;SAAXA,WAAW;EAAA+B,OAAA,EAAX/B,WAAW,CAAAgC,IAAA;EAAAC,UAAA,EAFV;AAAM;SAEPjC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}